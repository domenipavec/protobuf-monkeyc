// Code generated by protoc-gen-monkeyc. DO NOT EDIT.

import Toybox.Lang;

class ExampleMessage {
    class LocalMessage {
        public var l1 as String;
        
        public function initialize() {
            l1 = "";
        }
    
        public function Encode() as ByteArray {
            var result = []b;
            result.addAll(Protobuf.encodeFieldLen(1, l1, false));
            return result;
        }
    }

    enum LocalEnum {
        LA = 0,
        LB = 1,
    }

    public var i32 as Number;
    public var i64 as Long;
    public var u32 as Number;
    public var u64 as Long;
    public var s32 as Number;
    public var s64 as Long;
    public var f32 as Number;
    public var f64 as Long;
    public var sf32 as Number;
    public var sf64 as Long;
    public var fl as Float;
    public var str as String;
    public var byt as ByteArray;
    public var b as Boolean;
    public var ge as GlobalEnum;
    public var le as LocalEnum;
    public var gm as GlobalMessage;
    public var lm as LocalMessage;
    public var ri64 as Array<Long>;
    public var rf32 as Array<Number>;
    public var rf64 as Array<Long>;
    public var rstr as Array<String>;
    public var rgm as Array<GlobalMessage>;
    public var rpi64 as Array<Long>;
    public var rpf32 as Array<Number>;
    public var rpf64 as Array<Long>;
    
    public function initialize() {
        i32 = 0;
        i64 = 0l;
        u32 = 0;
        u64 = 0l;
        s32 = 0;
        s64 = 0l;
        f32 = 0;
        f64 = 0l;
        sf32 = 0;
        sf64 = 0l;
        fl = 0.0;
        str = "";
        byt = []b;
        b = false;
        ge = 0 as GlobalEnum;
        le = 0 as LocalEnum;
        gm = new GlobalMessage();
        lm = new LocalMessage();
        ri64 = [];
        rf32 = [];
        rf64 = [];
        rstr = [];
        rgm = [];
        rpi64 = [];
        rpf32 = [];
        rpf64 = [];
    }

    public function Encode() as ByteArray {
        var result = []b;
        result.addAll(Protobuf.encodeFieldVarint(1, i32, false));
        result.addAll(Protobuf.encodeFieldVarint(2, i64, false));
        result.addAll(Protobuf.encodeFieldVarint(3, u32, false));
        result.addAll(Protobuf.encodeFieldVarint(4, u64, false));
        result.addAll(Protobuf.encodeFieldVarint(5, Protobuf.toSignedInt(s32), false));
        result.addAll(Protobuf.encodeFieldVarint(6, Protobuf.toSignedInt(s64), false));
        result.addAll(Protobuf.encodeField32(7, f32, false));
        result.addAll(Protobuf.encodeField64(8, f64, false));
        result.addAll(Protobuf.encodeField32(9, sf32, false));
        result.addAll(Protobuf.encodeField64(10, sf64, false));
        result.addAll(Protobuf.encodeField32(11, fl, false));
        result.addAll(Protobuf.encodeFieldLen(13, str, false));
        result.addAll(Protobuf.encodeFieldLen(14, byt, false));
        result.addAll(Protobuf.encodeFieldVarint(15, b, false));
        result.addAll(Protobuf.encodeFieldVarint(16, ge, false));
        result.addAll(Protobuf.encodeFieldVarint(17, le, false));
        result.addAll(Protobuf.encodeFieldLen(18, gm.Encode(), false));
        result.addAll(Protobuf.encodeFieldLen(19, lm.Encode(), false));
        for (var i = 0; i < ri64.size(); i++) {
            result.addAll(Protobuf.encodeFieldVarint(20, ri64[i], true));
        }
        for (var i = 0; i < rf32.size(); i++) {
            result.addAll(Protobuf.encodeField32(21, rf32[i], true));
        }
        for (var i = 0; i < rf64.size(); i++) {
            result.addAll(Protobuf.encodeField64(22, rf64[i], true));
        }
        for (var i = 0; i < rstr.size(); i++) {
            result.addAll(Protobuf.encodeFieldLen(23, rstr[i], true));
        }
        for (var i = 0; i < rgm.size(); i++) {
            result.addAll(Protobuf.encodeFieldLen(24, rgm[i].Encode(), true));
        }
        {
            var packed = []b;
            for (var i = 0; i < rpi64.size(); i++) {
                packed.addAll(Protobuf.encodeFieldVarint(0, rpi64[i], true));
            }
            result.addAll(Protobuf.encodeFieldLen(25, packed, false));
        }
        {
            var packed = []b;
            for (var i = 0; i < rpf32.size(); i++) {
                packed.addAll(Protobuf.encodeField32(0, rpf32[i], true));
            }
            result.addAll(Protobuf.encodeFieldLen(26, packed, false));
        }
        {
            var packed = []b;
            for (var i = 0; i < rpf64.size(); i++) {
                packed.addAll(Protobuf.encodeField64(0, rpf64[i], true));
            }
            result.addAll(Protobuf.encodeFieldLen(27, packed, false));
        }
        return result;
    }
}

class GlobalMessage {
    public var g1 as Number;
    
    public function initialize() {
        g1 = 0;
    }

    public function Encode() as ByteArray {
        var result = []b;
        result.addAll(Protobuf.encodeFieldVarint(1, g1, false));
        return result;
    }
}

enum GlobalEnum {
    A = 0,
    B = 1,
}
